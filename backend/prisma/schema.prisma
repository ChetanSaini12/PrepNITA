generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @unique @default(autoincrement())
  authentication   Authentication?
  userContribution UserContribution?
  userInformation  UserInformation?
  userTraining     UserTraining?
}

model UserInformation {
  id                Int         @id @unique @default(autoincrement())
  userId            Int         @unique
  email             String      @unique
  username          String?     @unique
  name              String?
  password          String
  profilePic        String?     @default("https://res.cloudinary.com/ddxrqyl1c/image/upload/v1720017347/bdc3eb5c01c7846632a85c2cea776019_w4q1dt.jpg")
  mobileNum         String?
  role              Roles       @default(USER)
  gender            Gender?
  collegeId         String?
  graduationYear    Int?
  cgpa              Float?
  college           String?
  department        Department?
  course            Course?
  state             String?
  hosteler          Boolean?
  leetcodeProfile   String?
  codeforcesProfile String?
  linkedinProfile   String?
  githubProfile     String?
  informationUser   User        @relation(fields: [userId], references: [id], map: "user_information_user_fk")
}

model Authentication {
  id                 Int       @id @unique @default(autoincrement())
  userId             Int       @unique
  otpForEmail        String?
  otpEmailExpiry     DateTime?
  otpForExtra        String?
  otpExtraExpiry     DateTime?
  isVerified         Boolean   @default(false)
  isBoarded          Boolean   @default(false)
  authenticationUser User      @relation(fields: [userId], references: [id], map: "authentication_user_fk")
}

model UserContribution {
  id                 Int         @id @unique @default(autoincrement())
  userId             Int         @unique
  contributionPoints Int         @default(0)
  articles           Article[]
  interview          Interview[]
  questions          Question[]
  quizes             Quiz[]
  experiences        Experience[]
  contributionUser   User        @relation(fields: [userId], references: [id], map: "user_contribution_user_fk")
}

model UserTraining {
  id             Int              @id @unique @default(autoincrement())
  userId         Int              @unique
  trainingPoints Int              @default(0)
  interview      Interview[]
  quizesAttended QuizAttendance[]
  trainingUser   User             @relation(fields: [userId], references: [id], map: "user_training_user_fk")
}

model Question {
  id          Int              @id @unique @default(autoincrement())
  description String
  answer      String?
  createdBy   Int
  tags        String[]
  isApproved  Boolean          @default(false)
  isVisible   Boolean          @default(false)
  upvotes     Int              @default(0)
  downvotes   Int              @default(0)
  links       QueAddOnLink[]
  creator     UserContribution @relation(fields: [createdBy], references: [id], map: "question_user_contribution_fk")
}

model QueAddOnLink {
  id         Int      @id @unique @default(autoincrement())
  questionId Int
  title      String
  url        String
  question   Question @relation(fields: [questionId], references: [id], map: "question_add_onlink_fk")
}

model Quiz {
  id          Int              @id @unique @default(autoincrement())
  createdBy   Int              
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  isApproved  Boolean          @default(false)
  isVisible  Boolean          @default(false)
  creator     UserContribution @relation(fields: [createdBy], references: [id], map: "quiz_user_contribution_fk")
  attendees   QuizAttendance[]
  questions   QuizQuestion[]
}

model QuizAttendance {
  id       Int          @id @unique @default(autoincrement())
  quizId   Int
  userId   Int
  score    Int
  response Int[]
  attendee UserTraining @relation(fields: [userId], references: [id], map: "quiz_attendence_traingin_fk")
  quiz     Quiz         @relation(fields: [quizId], references: [id], map: "quiz_qttendence_quiz_fk")
}

model QuizQuestion {
  id            Int      @id @unique @default(autoincrement())
  quizId        Int
  description   String
  options       String[]
  correctOption Int
  quiz          Quiz     @relation(fields: [quizId], references: [id], map: "quiz_question_quiz_fk")
}

model Article {
  id          Int              @id @unique @default(autoincrement())
  createdBy   Int
  title       String
  description String
  isApproved  Boolean          @default(false)
  isVisible  Boolean          @default(false)
  creator     UserContribution @relation(fields: [createdBy], references: [id], map: "article_user_fk")
}

model Interview {
  id            Int               @id @unique @default(autoincrement())
  interviewerId Int?
  intervieweeId Int
  startTime     DateTime
  duration      Int
  topics        String[]
  isCompleted   Boolean           @default(false)
  feedback      Feedback?
  roomId        String            @default("0")
  interviewee   UserTraining      @relation(fields: [intervieweeId], references: [id], map: "interviewee_user_contribution_fk")
  interviewer   UserContribution? @relation(fields: [interviewerId], references: [id], map: "interviewer_user_contribution_fk")
}

model Feedback {
  id             Int       @id @unique @default(autoincrement())
  interviewId    Int       @unique
  communication  Int       @default(0)
  development    Int       @default(0)
  dsa            Int       @default(0)
  csfundamentals Int       @default(0)
  notes          String[]
  points         Int       @default(0)
  interview      Interview @relation(fields: [interviewId], references: [id], map: "feedback_interview_fk")
}

model Experience {
  id             Int       @id @unique @default(autoincrement())
  company        String       
  role           String    
  anonymous      Boolean   @default(false)
  description    String       
  helperPic      String   @default("https://res.cloudinary.com/ddxrqyl1c/image/upload/v1720018573/98994d307591550b1e2a0ba1bdab80d8_eyq5z2.jpg")
  location       String   @default("Bangalore, Karnataka, India")
  eventDate      DateTime @default("2024-07-03T14:58:39.091Z")
  type           ExperienceType @default(ON_CAMPUS)
  createdAt      DateTime
  isApproved     Boolean          @default(false)
  isVisible      Boolean          @default(false)
  createdBy      Int
  upvotes        Int       @default(0)
  downvotes      Int       @default(0)
  comments       ExpComment[]
  creator        UserContribution? @relation(fields: [createdBy], references: [id], map: "exp_creator_user_contribution_fk")
}

model ExpComment {
  id             Int       @id @unique @default(autoincrement())
  experienceId   Int
  description    String
  reply          ExpReply[]
  commentorId    Int
  likes          Int      @default(0)
  experience     Experience @relation(fields: [experienceId], references: [id], map : "comment_experience_fk" )
}

model ExpReply {
  id             Int       @id @unique @default(autoincrement())
  expcommentId   Int
  description    String
  replierId      Int
  likes          Int    @default(0)
  comment        ExpComment @relation(fields: [expcommentId], references: [id], map : "exp_reply_comment_fk")
}

model UserVotes {
  id             Int        @id @unique @default(autoincrement())
  userId         Int
  areaId         Int
  type           VoteType
  area           VoteArea
}

enum VoteType {
  LIKE
  DISLIKE
}

enum VoteArea {
  QUESTION
  EXPERIENCE
  EXP_COMMENT
  EXP_REPLY
}

enum Roles {
  USER
  ADMIN
  SUPERADMIN
  MANAGER
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  GENDERQUEER
  AGENDER
  TRANSGENDER
  TWO_SPIRIT
  PREFER_NOT_TO_SAY
  OTHER
}

enum Department {
  COMPUTER_SCIENCE_AND_ENGINEERING
  ELECTRONICS_AND_INSTRUMENTATION_ENGINEERING
  ELECTRONICS_AND_COMMUNICATIONS_ENGINEERING
  ELECTRICAL_ENGINEERING
  MECHANICAL_ENGINEERING
  CHEMICAL_ENGINEERING
  CIVIL_ENGINEERING
  PRODUCTION_ENGINEERING
  BIO_TECH_AND_BIO_ENGINEERING
  OTHER
}

enum Course {
  BTech
  PhD
  MCA
  MTech
  Other
}

enum ExperienceType {
  ON_CAMPUS
  OFF_CAMPUS
}
